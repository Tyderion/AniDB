/*
 * XaucSwingAddDialog.java
 * Created on 2/Jan/2009, 22:24:50
 */
package clients;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import utils.DirectoryParser;

/**
 *
 * @author fahrenheit
 */
public class XaucSwingAddDialog extends javax.swing.JFrame implements WindowListener {
	private static final long serialVersionUID = 8246702421211108110L;

	/** Creates new form XaucSwingAddDialog */
    public XaucSwingAddDialog() {
        initComponents();
		this.addWindowListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserDirectories = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add directory");
        setLocationByPlatform(true);
        setResizable(false);

        fileChooserDirectories.setAcceptAllFileFilterUsed(false);
        fileChooserDirectories.setApproveButtonText("Add");
        fileChooserDirectories.setApproveButtonToolTipText("Add selected directory");
        fileChooserDirectories.setCurrentDirectory(null);
        fileChooserDirectories.setDialogTitle("Add directory");
        fileChooserDirectories.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooserDirectories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserDirectoriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fileChooserDirectories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooserDirectories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void fileChooserDirectoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserDirectoriesActionPerformed
		if (evt.getActionCommand().equals("ApproveSelection")) {
			if (this.mainWindow != null) {
				if (!directoryMode) {
					this.mainWindow.addFileToFilesTable(fileChooserDirectories.getSelectedFile());
				} else {
					ArrayList<File> files = dirparser.scanDirectory(fileChooserDirectories.getSelectedFile());
					Iterator<File> it = files.iterator();
					while (it.hasNext())
						this.mainWindow.addFileToFilesTable(it.next());
				}
			}
		}
		this.dispose();
	}//GEN-LAST:event_fileChooserDirectoriesActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XaucSwingAddDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooserDirectories;
    // End of variables declaration//GEN-END:variables
	protected XaucSwing mainWindow = null;
	protected boolean directoryMode = true;
	protected DirectoryParser dirparser = new DirectoryParser();
	
	/**
	 * Sets the main window
	 * @param mainWindow main XaucSwing window
	 */
	public void setXaucSwing(XaucSwing mainWindow) { this.mainWindow = mainWindow; }

	/**
	 * Sets the mode of the Add Dialog window
	 * @param fileMode Set true for Add File Mode, false for Add Directory mode
	 */
	public void setMode(boolean fileMode) {
		if (fileMode) {
			setTitle("Add file");
			fileChooserDirectories.setDialogTitle("Add file");
			fileChooserDirectories.setApproveButtonToolTipText("Add selected file");
			fileChooserDirectories.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
			fileChooserDirectories.setAcceptAllFileFilterUsed(true);
			fileChooserDirectories.addChoosableFileFilter(new xaucFilesFilter(dirparser.getExtensionFilter()));
			this.directoryMode = false;
		} else {
			setTitle("Add directory");
			fileChooserDirectories.setDialogTitle("Add directory");
			fileChooserDirectories.setApproveButtonToolTipText("Add selected directory");
			fileChooserDirectories.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
			fileChooserDirectories.setAcceptAllFileFilterUsed(false);
			this.directoryMode = true;
		}
	}

	/**
	 * File filter class
	 */
	public class xaucFilesFilter extends javax.swing.filechooser.FileFilter {
		protected String extensionFilter = "";
		public xaucFilesFilter() {};
		public xaucFilesFilter(String extensionFilter) {
			this.extensionFilter = extensionFilter;
		}

        public boolean accept(File file) {
			if (file.isDirectory()) return true;
			String filename = file.getName();
			int i = filename.lastIndexOf(".");
			if(i<0) return false;
			String extension = filename.substring(i+1).toLowerCase();
			if (this.extensionFilter.indexOf(extension) < 0) return false;
			return true;
        }
        public String getDescription() {
            return "video files ("+this.extensionFilter+")";
        }
    }

    @Override
    public void windowOpened(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowClosing(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowClosed(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

}
