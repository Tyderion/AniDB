/*
 * Preferences.java
 * Created on 11/Jan/2009, 13:46:33
 */
package ui;

import avparsing.AVParserOptions;
import clients.XaucOptions;
import clients.XaucShared;
import clients.XaucSwing;
import hashing.HasherOptions;
import java.awt.event.ItemEvent;
import javax.swing.ImageIcon;

/**
 * Preferences Dialog for XAUCSwing
 * @author fahrenheit
 */
public class Preferences extends javax.swing.JFrame {
	private static final long serialVersionUID = 5511880286345360610L;
	protected XaucShared sharedParent = null;
	protected AVParserOptions parsingOptions = new AVParserOptions();
	protected HasherOptions hashingOptions = new HasherOptions();
	protected XaucOptions clientOptions = new XaucOptions();

    /** Creates new form Preferences */
    public Preferences(XaucShared sharedParent) {
    	super();
    	this.sharedParent = sharedParent;
    	parsingOptions = sharedParent.getParsingOptions();
    	hashingOptions = sharedParent.getHashingOptions();
    	clientOptions = sharedParent.getClientOptions();
        initComponents();
        setSettings();
        this.setIconImage(new ImageIcon(XaucSwing.class.getResource("/icons/cog.png")).getImage());
        setVisible(true);
    }

	/**
	 * Sets fields acording to options
	 */
	public void setSettings() {
		// Hashing Options
		this.hashingEnableCheckBox.setSelected(this.hashingOptions.isEnabled());
		this.hashingAlgoEd2kCheckBox.setSelected(this.hashingOptions.isEnableED2K());
		this.hashingAlgoCrc32CheckBox.setSelected(this.hashingOptions.isEnableCRC32());
		this.hashingAlgoMd5CheckBox.setSelected(this.hashingOptions.isEnableMD5());
		this.hashingAlgoSha1CheckBox.setSelected(this.hashingOptions.isEnableSHA1());
		this.hashingAlgoTthCheckBox.setSelected(this.hashingOptions.isEnableTTH());
		if (!this.hashingOptions.isEnabled()) {
			//this.hashingAlgoEd2kCheckBox.setEnabled(false); //allways disabled
			this.hashingAlgoCrc32CheckBox.setEnabled(false);
			this.hashingAlgoMd5CheckBox.setEnabled(false);
			this.hashingAlgoSha1CheckBox.setEnabled(false);
			this.hashingAlgoTthCheckBox.setEnabled(false);
		}
		// AVParsing Options
		this.parsingEnableCheckBox.setSelected(this.parsingOptions.isEnabled());
		this.parsingFPCheckBox.setSelected(this.parsingOptions.isFullParse());
		this.parsingVbrBitrateRadioButton.setSelected(this.parsingOptions.getVbr_calc_mode() == avparsing.AVParserFFmpegJava.VBR_BY_PACKET_BITRATE);
		this.parsingVbrSizeRadioButton.setSelected(this.parsingOptions.getVbr_calc_mode() == avparsing.AVParserFFmpegJava.VBR_BY_PACKET_SIZE);
		if (!this.parsingOptions.isEnabled() || this.parsingOptions.isDisabled()) {
			this.parsingFPCheckBox.setEnabled(false);
			this.parsingVbrBitrateRadioButton.setEnabled(false);
			this.parsingVbrSizeRadioButton.setEnabled(false);
			if (this.parsingOptions.isDisabled()) {
				this.ffmpegWarningLabel.setText("FFmpeg libraries not detected");
				this.ffmpegWarningLabel.setIcon(new ImageIcon(XaucSwing.class.getResource("/icons/exclamation.png")));
			} else {
				this.ffmpegWarningLabel.setText(null);
				this.ffmpegWarningLabel.setIcon(null);
			}
		}
		if (this.parsingOptions.isEnabled() && !this.parsingOptions.isDisabled()) {
			if (this.parsingOptions.isFullParse()) {
				this.ffmpegWarningLabel.setText("Full parsing is unstable, use with care");
				this.ffmpegWarningLabel.setIcon(new ImageIcon(XaucSwing.class.getResource("/icons/error.png")));
				this.parsingVbrBitrateRadioButton.setEnabled(true);
				this.parsingVbrSizeRadioButton.setEnabled(true);
			} else {
				this.parsingVbrBitrateRadioButton.setEnabled(false);
				this.parsingVbrSizeRadioButton.setEnabled(false);				
			}
		}
		// Client Options
		if (this.clientOptions.getWriteFileOuputFormat() == XaucOptions.OutputFormats.TXT)
			this.xaucWriteFilesAsComboBox.setSelectedIndex(1);
		else if (this.clientOptions.getWriteFileOuputFormat() == XaucOptions.OutputFormats.XML)
			this.xaucWriteFilesAsComboBox.setSelectedIndex(2);
		else
			this.xaucWriteFilesAsComboBox.setSelectedIndex(0);
		if (this.clientOptions.getTreeFileOuputFormat() == XaucOptions.OutputFormats.TXT)
			this.xaucShowFilesComboBox.setSelectedIndex(1);
		else if (this.clientOptions.getTreeFileOuputFormat() == XaucOptions.OutputFormats.XML)
			this.xaucShowFilesComboBox.setSelectedIndex(2);
		else
			this.xaucShowFilesComboBox.setSelectedIndex(0);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preferencesTabbedPane = new javax.swing.JTabbedPane();
        preferencesXaucPanel = new javax.swing.JPanel();
        xaucOptionsPanel = new javax.swing.JPanel();
        xaucShowFilesInfoAsLabel = new javax.swing.JLabel();
        xaucShowFilesComboBox = new javax.swing.JComboBox();
        xaucWriteFilesInfoAsLabel = new javax.swing.JLabel();
        xaucWriteFilesAsComboBox = new javax.swing.JComboBox();
        preferencesAnidbPanel = new javax.swing.JPanel();
        anidbOptionsPanel = new javax.swing.JPanel();
        anidbServerLabel = new javax.swing.JLabel();
        anidbUsernameLabel = new javax.swing.JLabel();
        anidbUsernameTextField = new javax.swing.JTextField();
        anidbHostnameTextField = new javax.swing.JTextField();
        anidbPasswordLabel = new javax.swing.JLabel();
        anidbPasswordField = new javax.swing.JPasswordField();
        anidbPortLabel = new javax.swing.JLabel();
        anidbPortTextField = new javax.swing.JTextField();
        anidbEnableCheckBox = new javax.swing.JCheckBox();
        preferencesHashingPanel = new javax.swing.JPanel();
        hashingEnableCheckBox = new javax.swing.JCheckBox();
        hsahingOptionsPanel = new javax.swing.JPanel();
        hashingAlgoEd2kCheckBox = new javax.swing.JCheckBox();
        hashingAlgoCrc32CheckBox = new javax.swing.JCheckBox();
        hashingAlgoMd5CheckBox = new javax.swing.JCheckBox();
        hashingAlgoSha1CheckBox = new javax.swing.JCheckBox();
        hashingAlgoTthCheckBox = new javax.swing.JCheckBox();
        preferencesParsingPanel = new javax.swing.JPanel();
        parsingOptionsPanel = new javax.swing.JPanel();
        parsingFPCheckBox = new javax.swing.JCheckBox();
        parsingVbrBitrateRadioButton = new javax.swing.JRadioButton();
        parsingVbrSizeRadioButton = new javax.swing.JRadioButton();
        parsingEnableCheckBox = new javax.swing.JCheckBox();
        ffmpegWarningLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preferences");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(400, 270));
        setResizable(false);

        xaucOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        xaucShowFilesInfoAsLabel.setFont(xaucShowFilesInfoAsLabel.getFont().deriveFont(xaucShowFilesInfoAsLabel.getFont().getSize()-1f));
        xaucShowFilesInfoAsLabel.setText("Show file information on Files tab as: ");

        xaucShowFilesComboBox.setFont(xaucShowFilesComboBox.getFont().deriveFont(xaucShowFilesComboBox.getFont().getSize()-1f));
        xaucShowFilesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Text", "XML" }));
        xaucShowFilesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clientSettingsItemStateChanged(evt);
            }
        });

        xaucWriteFilesInfoAsLabel.setFont(xaucWriteFilesInfoAsLabel.getFont().deriveFont(xaucWriteFilesInfoAsLabel.getFont().getSize()-1f));
        xaucWriteFilesInfoAsLabel.setText("Write file information to Disk as:");

        xaucWriteFilesAsComboBox.setFont(xaucWriteFilesAsComboBox.getFont().deriveFont(xaucWriteFilesAsComboBox.getFont().getSize()-1f));
        xaucWriteFilesAsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Text", "XML" }));
        xaucWriteFilesAsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clientSettingsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout xaucOptionsPanelLayout = new javax.swing.GroupLayout(xaucOptionsPanel);
        xaucOptionsPanel.setLayout(xaucOptionsPanelLayout);
        xaucOptionsPanelLayout.setHorizontalGroup(
            xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xaucOptionsPanelLayout.createSequentialGroup()
                .addGroup(xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xaucShowFilesInfoAsLabel)
                    .addComponent(xaucWriteFilesInfoAsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xaucWriteFilesAsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(xaucShowFilesComboBox, 0, 62, Short.MAX_VALUE))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        xaucOptionsPanelLayout.setVerticalGroup(
            xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xaucOptionsPanelLayout.createSequentialGroup()
                .addGroup(xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xaucShowFilesInfoAsLabel)
                    .addComponent(xaucShowFilesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(xaucOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xaucWriteFilesInfoAsLabel)
                    .addComponent(xaucWriteFilesAsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout preferencesXaucPanelLayout = new javax.swing.GroupLayout(preferencesXaucPanel);
        preferencesXaucPanel.setLayout(preferencesXaucPanelLayout);
        preferencesXaucPanelLayout.setHorizontalGroup(
            preferencesXaucPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesXaucPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xaucOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        preferencesXaucPanelLayout.setVerticalGroup(
            preferencesXaucPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesXaucPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xaucOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        preferencesTabbedPane.addTab("XAUC", new javax.swing.ImageIcon(getClass().getResource("/icons/disk.png")), preferencesXaucPanel, "File settings"); // NOI18N

        anidbOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        anidbServerLabel.setFont(anidbServerLabel.getFont().deriveFont(anidbServerLabel.getFont().getSize()-1f));
        anidbServerLabel.setText("AniDB server:");

        anidbUsernameLabel.setFont(anidbUsernameLabel.getFont().deriveFont(anidbUsernameLabel.getFont().getSize()-1f));
        anidbUsernameLabel.setText("AniDB username:");

        anidbUsernameTextField.setFont(anidbUsernameTextField.getFont().deriveFont(anidbUsernameTextField.getFont().getSize()-1f));
        anidbUsernameTextField.setEnabled(false);

        anidbHostnameTextField.setFont(anidbHostnameTextField.getFont().deriveFont(anidbHostnameTextField.getFont().getSize()-1f));
        anidbHostnameTextField.setText("api.anidb.net");
        anidbHostnameTextField.setEnabled(false);

        anidbPasswordLabel.setFont(anidbPasswordLabel.getFont().deriveFont(anidbPasswordLabel.getFont().getSize()-1f));
        anidbPasswordLabel.setText("AniDB api password:");

        anidbPasswordField.setFont(anidbPasswordField.getFont().deriveFont(anidbPasswordField.getFont().getSize()-1f));
        anidbPasswordField.setEnabled(false);

        anidbPortLabel.setFont(anidbPortLabel.getFont().deriveFont(anidbPortLabel.getFont().getSize()-1f));
        anidbPortLabel.setText("port");

        anidbPortTextField.setFont(anidbPortTextField.getFont().deriveFont(anidbPortTextField.getFont().getSize()-1f));
        anidbPortTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        anidbPortTextField.setText("9000");
        anidbPortTextField.setEnabled(false);

        javax.swing.GroupLayout anidbOptionsPanelLayout = new javax.swing.GroupLayout(anidbOptionsPanel);
        anidbOptionsPanel.setLayout(anidbOptionsPanelLayout);
        anidbOptionsPanelLayout.setHorizontalGroup(
            anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(anidbOptionsPanelLayout.createSequentialGroup()
                .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(anidbOptionsPanelLayout.createSequentialGroup()
                        .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(anidbServerLabel)
                            .addComponent(anidbUsernameLabel))
                        .addGap(20, 20, 20)
                        .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(anidbUsernameTextField)
                            .addComponent(anidbHostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(anidbOptionsPanelLayout.createSequentialGroup()
                        .addComponent(anidbPasswordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anidbPasswordField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anidbPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anidbPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        anidbOptionsPanelLayout.setVerticalGroup(
            anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(anidbOptionsPanelLayout.createSequentialGroup()
                .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anidbServerLabel)
                    .addGroup(anidbOptionsPanelLayout.createSequentialGroup()
                        .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(anidbPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(anidbPortLabel)
                            .addComponent(anidbHostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(anidbUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(anidbUsernameLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anidbOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anidbPasswordLabel)
                    .addComponent(anidbPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        anidbEnableCheckBox.setFont(anidbEnableCheckBox.getFont().deriveFont(anidbEnableCheckBox.getFont().getSize()-1f));
        anidbEnableCheckBox.setText("Enable");
        anidbEnableCheckBox.setToolTipText("Enable or disable access to AniDB (offline mode if disabled)");
        anidbEnableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                anidbEnableCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout preferencesAnidbPanelLayout = new javax.swing.GroupLayout(preferencesAnidbPanel);
        preferencesAnidbPanel.setLayout(preferencesAnidbPanelLayout);
        preferencesAnidbPanelLayout.setHorizontalGroup(
            preferencesAnidbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesAnidbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preferencesAnidbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anidbEnableCheckBox)
                    .addComponent(anidbOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        preferencesAnidbPanelLayout.setVerticalGroup(
            preferencesAnidbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesAnidbPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(anidbEnableCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anidbOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        preferencesTabbedPane.addTab("AniDB", new javax.swing.ImageIcon(getClass().getResource("/icons/anidb.png")), preferencesAnidbPanel, "AniDB settings"); // NOI18N

        hashingEnableCheckBox.setFont(hashingEnableCheckBox.getFont().deriveFont(hashingEnableCheckBox.getFont().getSize()-1f));
        hashingEnableCheckBox.setSelected(true);
        hashingEnableCheckBox.setText("Enable");
        hashingEnableCheckBox.setToolTipText("Enable or disable hashing of files (with hashing disabled you won't be able to add files to AniDB mylist)");
        hashingEnableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingEnableCheckBoxItemStateChanged(evt);
            }
        });

        hsahingOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Algorithms", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        hsahingOptionsPanel.setFont(hsahingOptionsPanel.getFont().deriveFont(hsahingOptionsPanel.getFont().getSize()-1f));

        hashingAlgoEd2kCheckBox.setFont(hashingAlgoEd2kCheckBox.getFont().deriveFont(hashingAlgoEd2kCheckBox.getFont().getSize()-1f));
        hashingAlgoEd2kCheckBox.setSelected(true);
        hashingAlgoEd2kCheckBox.setText("ED2K");
        hashingAlgoEd2kCheckBox.setEnabled(false);
        hashingAlgoEd2kCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingSettingsEnabledCheckBoxItemStateChanged(evt);
            }
        });

        hashingAlgoCrc32CheckBox.setFont(hashingAlgoCrc32CheckBox.getFont().deriveFont(hashingAlgoCrc32CheckBox.getFont().getSize()-1f));
        hashingAlgoCrc32CheckBox.setText("CRC32");
        hashingAlgoCrc32CheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingSettingsEnabledCheckBoxItemStateChanged(evt);
            }
        });

        hashingAlgoMd5CheckBox.setFont(hashingAlgoMd5CheckBox.getFont().deriveFont(hashingAlgoMd5CheckBox.getFont().getSize()-1f));
        hashingAlgoMd5CheckBox.setText("MD5");
        hashingAlgoMd5CheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingSettingsEnabledCheckBoxItemStateChanged(evt);
            }
        });

        hashingAlgoSha1CheckBox.setFont(hashingAlgoSha1CheckBox.getFont().deriveFont(hashingAlgoSha1CheckBox.getFont().getSize()-1f));
        hashingAlgoSha1CheckBox.setText("SHA1");
        hashingAlgoSha1CheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingSettingsEnabledCheckBoxItemStateChanged(evt);
            }
        });

        hashingAlgoTthCheckBox.setFont(hashingAlgoTthCheckBox.getFont().deriveFont(hashingAlgoTthCheckBox.getFont().getSize()-1f));
        hashingAlgoTthCheckBox.setText("TTH");
        hashingAlgoTthCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hashingSettingsEnabledCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout hsahingOptionsPanelLayout = new javax.swing.GroupLayout(hsahingOptionsPanel);
        hsahingOptionsPanel.setLayout(hsahingOptionsPanelLayout);
        hsahingOptionsPanelLayout.setHorizontalGroup(
            hsahingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hsahingOptionsPanelLayout.createSequentialGroup()
                .addGroup(hsahingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashingAlgoEd2kCheckBox)
                    .addComponent(hashingAlgoCrc32CheckBox)
                    .addComponent(hashingAlgoMd5CheckBox)
                    .addComponent(hashingAlgoSha1CheckBox)
                    .addComponent(hashingAlgoTthCheckBox))
                .addContainerGap(304, Short.MAX_VALUE))
        );
        hsahingOptionsPanelLayout.setVerticalGroup(
            hsahingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hsahingOptionsPanelLayout.createSequentialGroup()
                .addComponent(hashingAlgoEd2kCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashingAlgoCrc32CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashingAlgoMd5CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashingAlgoSha1CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashingAlgoTthCheckBox))
        );

        javax.swing.GroupLayout preferencesHashingPanelLayout = new javax.swing.GroupLayout(preferencesHashingPanel);
        preferencesHashingPanel.setLayout(preferencesHashingPanelLayout);
        preferencesHashingPanelLayout.setHorizontalGroup(
            preferencesHashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesHashingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preferencesHashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashingEnableCheckBox)
                    .addComponent(hsahingOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        preferencesHashingPanelLayout.setVerticalGroup(
            preferencesHashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesHashingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashingEnableCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hsahingOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        preferencesTabbedPane.addTab("Hashing", new javax.swing.ImageIcon(getClass().getResource("/icons/page_white_stack.png")), preferencesHashingPanel, "Hashing settings"); // NOI18N

        parsingOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        parsingOptionsPanel.setFont(parsingOptionsPanel.getFont().deriveFont(parsingOptionsPanel.getFont().getSize()-1f));

        parsingFPCheckBox.setFont(parsingFPCheckBox.getFont().deriveFont(parsingFPCheckBox.getFont().getSize()-1f));
        parsingFPCheckBox.setText("Full parse");
        parsingFPCheckBox.setToolTipText("If you select this option, parsing files will take long but you will get extra information like stream bitrates, duration, size, if stream is vbr and vfr");
        parsingFPCheckBox.setEnabled(false);
        parsingFPCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                parsingSettingsEnableCheckBoxItemStateChanged(evt);
            }
        });

        parsingVbrBitrateRadioButton.setFont(parsingVbrBitrateRadioButton.getFont().deriveFont(parsingVbrBitrateRadioButton.getFont().getSize()-1f));
        parsingVbrBitrateRadioButton.setSelected(true);
        parsingVbrBitrateRadioButton.setText("Check for VBR by packet bitrate (safer)");
        parsingVbrBitrateRadioButton.setEnabled(false);
        parsingVbrBitrateRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                parsingSettingsEnableCheckBoxItemStateChanged(evt);
            }
        });

        parsingVbrSizeRadioButton.setFont(parsingVbrSizeRadioButton.getFont().deriveFont(parsingVbrSizeRadioButton.getFont().getSize()-1f));
        parsingVbrSizeRadioButton.setText("Check for VBR by packet size (a bit faster, could be less acurate)");
        parsingVbrSizeRadioButton.setEnabled(false);
        parsingVbrSizeRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                parsingSettingsEnableCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout parsingOptionsPanelLayout = new javax.swing.GroupLayout(parsingOptionsPanel);
        parsingOptionsPanel.setLayout(parsingOptionsPanelLayout);
        parsingOptionsPanelLayout.setHorizontalGroup(
            parsingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parsingOptionsPanelLayout.createSequentialGroup()
                .addGroup(parsingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parsingFPCheckBox)
                    .addComponent(parsingVbrBitrateRadioButton)
                    .addComponent(parsingVbrSizeRadioButton))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        parsingOptionsPanelLayout.setVerticalGroup(
            parsingOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parsingOptionsPanelLayout.createSequentialGroup()
                .addComponent(parsingFPCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(parsingVbrBitrateRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(parsingVbrSizeRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parsingEnableCheckBox.setFont(parsingEnableCheckBox.getFont().deriveFont(parsingEnableCheckBox.getFont().getSize()-1f));
        parsingEnableCheckBox.setText("Enable");
        parsingEnableCheckBox.setToolTipText("Enable AV parsing to get information on codecs, durations, etc");
        parsingEnableCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                parsingEnableCheckBoxItemStateChanged(evt);
            }
        });

        ffmpegWarningLabel.setFont(ffmpegWarningLabel.getFont().deriveFont(ffmpegWarningLabel.getFont().getSize()-1f));
        ffmpegWarningLabel.setForeground(new java.awt.Color(153, 153, 153));
        ffmpegWarningLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout preferencesParsingPanelLayout = new javax.swing.GroupLayout(preferencesParsingPanel);
        preferencesParsingPanel.setLayout(preferencesParsingPanelLayout);
        preferencesParsingPanelLayout.setHorizontalGroup(
            preferencesParsingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesParsingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preferencesParsingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parsingOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preferencesParsingPanelLayout.createSequentialGroup()
                        .addComponent(parsingEnableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                        .addComponent(ffmpegWarningLabel)))
                .addContainerGap())
        );
        preferencesParsingPanelLayout.setVerticalGroup(
            preferencesParsingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preferencesParsingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preferencesParsingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ffmpegWarningLabel)
                    .addComponent(parsingEnableCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parsingOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        preferencesTabbedPane.addTab("AV Parsing", new javax.swing.ImageIcon(getClass().getResource("/icons/pictures.png")), preferencesParsingPanel, "AV Parsing settings"); // NOI18N

        saveButton.setFont(saveButton.getFont().deriveFont(saveButton.getFont().getSize()-1f));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/disk.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.setBorder(null);
        saveButton.setContentAreaFilled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(cancelButton.getFont().deriveFont(cancelButton.getFont().getSize()-1f));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setBorder(null);
        cancelButton.setContentAreaFilled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(preferencesTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(preferencesTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		this.parsingOptions.saveSettings(XaucShared.getAppDir());
		this.hashingOptions.saveSettings(XaucShared.getAppDir());
		this.clientOptions.saveSettings(XaucShared.getAppDir());
		this.setVisible(false);
		this.dispose();
	}//GEN-LAST:event_saveButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		this.setVisible(false);
		this.dispose();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void hashingEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hashingEnableCheckBoxItemStateChanged
		boolean isEnabled = (evt.getStateChange() == ItemEvent.SELECTED);
		//this.hashingAlgoEd2kCheckBox.setEnabled(isEnabled); // allways disabled
		this.hashingAlgoCrc32CheckBox.setEnabled(isEnabled);
		this.hashingAlgoMd5CheckBox.setEnabled(isEnabled);
		this.hashingAlgoSha1CheckBox.setEnabled(isEnabled);
		this.hashingAlgoTthCheckBox.setEnabled(isEnabled);
		hashingOptions.setEnabled(isEnabled);
	}//GEN-LAST:event_hashingEnableCheckBoxItemStateChanged

	/**
	 * Sets hashing options values
	 * @param evt
	 */
	private void hashingSettingsEnabledCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {
		Object source = evt.getItemSelectable();
		boolean isEnabled = (evt.getStateChange() == ItemEvent.SELECTED);

		if (source == this.hashingAlgoEd2kCheckBox) this.hashingOptions.setEnableED2K(isEnabled);
		else if (source == this.hashingAlgoCrc32CheckBox) this.hashingOptions.setEnableCRC32(isEnabled);
		else if (source == this.hashingAlgoMd5CheckBox) this.hashingOptions.setEnableMD5(isEnabled);
		else if (source == this.hashingAlgoSha1CheckBox) this.hashingOptions.setEnableSHA1(isEnabled);
		else if (source == this.hashingAlgoTthCheckBox) this.hashingOptions.setEnableTTH(isEnabled);
		else System.err.println("unknown hashing option to check for value");
	}

	private void parsingEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_parsingEnableCheckBoxItemStateChanged
		boolean isEnabled = (evt.getStateChange() == ItemEvent.SELECTED);
		parsingOptions.setEnabled(isEnabled);
		isEnabled = parsingOptions.isEnabled(); // check if we can do the operation
		if (parsingOptions.isDisabled()) {
			this.ffmpegWarningLabel.setText("FFmpeg libraries not detected");
			this.ffmpegWarningLabel.setIcon(new ImageIcon(XaucSwing.class.getResource("/icons/exclamation.png")));
		} else {
			this.ffmpegWarningLabel.setText(null);
			this.ffmpegWarningLabel.setIcon(null);
		}
		this.parsingFPCheckBox.setEnabled(isEnabled);
		this.parsingVbrBitrateRadioButton.setEnabled(isEnabled);
		this.parsingVbrSizeRadioButton.setEnabled(isEnabled);
		if (this.parsingOptions.isEnabled() && this.parsingOptions.isFullParse()) {
			this.parsingVbrBitrateRadioButton.setEnabled(true);
			this.parsingVbrSizeRadioButton.setEnabled(true);
		} else {
			this.parsingVbrBitrateRadioButton.setEnabled(false);
			this.parsingVbrSizeRadioButton.setEnabled(false);
		}
	}//GEN-LAST:event_parsingEnableCheckBoxItemStateChanged

	private void parsingSettingsEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {
		Object source = evt.getItemSelectable();
		boolean isEnabled = (evt.getStateChange() == ItemEvent.SELECTED);

		if (source == this.parsingFPCheckBox) {
			this.parsingOptions.setFullParse(isEnabled);
			if (isEnabled) {
				this.ffmpegWarningLabel.setText("Full parsing is unstable, use with care");
				this.ffmpegWarningLabel.setIcon(new ImageIcon(XaucSwing.class.getResource("/icons/error.png")));
			} else {
				this.ffmpegWarningLabel.setText(null);
				this.ffmpegWarningLabel.setIcon(null);
			}
			this.parsingVbrBitrateRadioButton.setEnabled(isEnabled);
			this.parsingVbrSizeRadioButton.setEnabled(isEnabled);
		} else if (source == this.parsingVbrBitrateRadioButton) {
			this.parsingVbrSizeRadioButton.setSelected(!isEnabled);
			this.parsingOptions.setVbr_calc_mode(avparsing.AVParserFFmpegJava.VBR_BY_PACKET_BITRATE);
		} else if (source == this.parsingVbrSizeRadioButton) {
			this.parsingVbrBitrateRadioButton.setSelected(!isEnabled);
			this.parsingOptions.setVbr_calc_mode(avparsing.AVParserFFmpegJava.VBR_BY_PACKET_SIZE);
		} else System.err.println("unknown parsing option to check for value");
	}
	
	private void clientSettingsItemStateChanged(java.awt.event.ItemEvent evt) {
		Object source = evt.getItemSelectable();

		if (source == this.xaucShowFilesComboBox) {
			switch (this.xaucShowFilesComboBox.getSelectedIndex()) {
				case 1: this.clientOptions.setTreeFileOuputFormat(XaucOptions.OutputFormats.TXT); break;
				case 2: this.clientOptions.setTreeFileOuputFormat(XaucOptions.OutputFormats.XML); break;
				default: this.clientOptions.setTreeFileOuputFormat(XaucOptions.OutputFormats.NONE); break;
			}
		} else if (source == this.xaucWriteFilesAsComboBox) {
			switch (this.xaucShowFilesComboBox.getSelectedIndex()) {
				case 1: this.clientOptions.setWriteFileOuputFormat(XaucOptions.OutputFormats.TXT); break;
				case 2: this.clientOptions.setWriteFileOuputFormat(XaucOptions.OutputFormats.XML); break;
				default: this.clientOptions.setWriteFileOuputFormat(XaucOptions.OutputFormats.NONE); break;
			}
		} else System.err.println("unknown client option to check for value");
	}

	private void anidbEnableCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_anidbEnableCheckBoxItemStateChanged
		boolean isEnabled = (evt.getStateChange() == ItemEvent.SELECTED);
		this.anidbHostnameTextField.setEnabled(isEnabled);
		this.anidbPortTextField.setEnabled(isEnabled);
		this.anidbUsernameTextField.setEnabled(isEnabled);
		this.anidbPasswordField.setEnabled(isEnabled);
	}//GEN-LAST:event_anidbEnableCheckBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox anidbEnableCheckBox;
    private javax.swing.JTextField anidbHostnameTextField;
    private javax.swing.JPanel anidbOptionsPanel;
    private javax.swing.JPasswordField anidbPasswordField;
    private javax.swing.JLabel anidbPasswordLabel;
    private javax.swing.JLabel anidbPortLabel;
    private javax.swing.JTextField anidbPortTextField;
    private javax.swing.JLabel anidbServerLabel;
    private javax.swing.JLabel anidbUsernameLabel;
    private javax.swing.JTextField anidbUsernameTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel ffmpegWarningLabel;
    private javax.swing.JCheckBox hashingAlgoCrc32CheckBox;
    private javax.swing.JCheckBox hashingAlgoEd2kCheckBox;
    private javax.swing.JCheckBox hashingAlgoMd5CheckBox;
    private javax.swing.JCheckBox hashingAlgoSha1CheckBox;
    private javax.swing.JCheckBox hashingAlgoTthCheckBox;
    private javax.swing.JCheckBox hashingEnableCheckBox;
    private javax.swing.JPanel hsahingOptionsPanel;
    private javax.swing.JCheckBox parsingEnableCheckBox;
    private javax.swing.JCheckBox parsingFPCheckBox;
    private javax.swing.JPanel parsingOptionsPanel;
    private javax.swing.JRadioButton parsingVbrBitrateRadioButton;
    private javax.swing.JRadioButton parsingVbrSizeRadioButton;
    private javax.swing.JPanel preferencesAnidbPanel;
    private javax.swing.JPanel preferencesHashingPanel;
    private javax.swing.JPanel preferencesParsingPanel;
    private javax.swing.JTabbedPane preferencesTabbedPane;
    private javax.swing.JPanel preferencesXaucPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel xaucOptionsPanel;
    private javax.swing.JComboBox xaucShowFilesComboBox;
    private javax.swing.JLabel xaucShowFilesInfoAsLabel;
    private javax.swing.JComboBox xaucWriteFilesAsComboBox;
    private javax.swing.JLabel xaucWriteFilesInfoAsLabel;
    // End of variables declaration//GEN-END:variables

}
